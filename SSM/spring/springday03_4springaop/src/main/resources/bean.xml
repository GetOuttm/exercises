<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置spring的ioc，把service配置进来-->
    <bean id="accountService" class="com.springaop.service.impl.AccountServiceImpl"></bean>

    <!--spring基于xml配置aop
        1.把通知bean也交给spring容器管理
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签表明开始配置切面
                id属性  给切面提供一个唯一标识
                ref属性  指定通知类bean的id
        4.在aop:aspect标签的内部使用对应的标签来配置通知的类型
                我们现在示例让printlnLogger方法在切入点方法之前执行，即前置通知
                    aop:before   前置通知
                        method属性  用于指定类中那个方法是前置执行
                        pointcut属性  用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法增强
                            切入点表达式的写法：
                                关键字:execution(表达式)
                                表达式写法   访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                                        访问修饰符可以省略  返回值可以使用通配符*表示任意返回值
                                        包名可以使用*表示任意包  但是有几级包就写几个*
                                        包名可以使用..表示当前包及其子包
                                        类名和方法名都可以使用*
                                        参数列表  可以直接写数据类型，基本类型写名称  int。引用类型写包名.类名的方法  java.lang.String
                                        使用通配符表示任意类型，执行有参数的切入点
                                        使用..表示有无参数都行
                                全通配写法
                                    * *..*.*(..)
                                实际开发切入点表达式的写法  切到业务层实现类下的所有方法
                                    * com.springaop.service.impl.*.*(..)
        5.
    -->
    <!--配置Logger类   切面类-->
    <bean id="logger" class="com.springaop.utils.Logger"></bean>

    <!--配置aop-->
    <aop:config>
        <!-- 切入点表达式定义   id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
              此标签写在aop:aspect标签内部只能当前切面使用。
              它还可以写在aop:aspect外面，此时就变成了所有切面可用 -->
        <aop:pointcut id="aopPointcut" expression="execution(* com.springaop.service.impl.*.*(..))"/>
        <!-- 切面配置 -->
        <aop:aspect id="aopLoggerAdvice" ref="logger">
            <!-- 【环绕通知】 配置环绕通知 详细的注释请看Logger类中-->
            <aop:around method="arroudLogger" pointcut-ref="aopPointcut"/>
<!--            &lt;!&ndash; 【前置通知】 配置前置通知：在切入点方法执行之前执行 &ndash;&gt;-->
<!--            <aop:before method="beforeLogger" pointcut-ref="aopPointcut" />-->
<!--            &lt;!&ndash; 【后置通知】 配置后置通知：。无论切入点方法是否正常执行它都会在其后面执行&ndash;&gt;-->
<!--            <aop:after method="afterLogger" pointcut-ref="aopPointcut"/>-->
<!--            &lt;!&ndash; 【返回后通知】 配置最终通知：   它和异常通知永远只能执行一个&ndash;&gt;-->
<!--            <aop:after-returning method="afterReturingLogger" pointcut-ref="aopPointcut"/>-->
<!--            &lt;!&ndash; 异常通知 配置异常通知：在切入点方法执行产生异常之后执行。它和返回后通知永远只能执行一个&ndash;&gt;-->
<!--            <aop:after-throwing method="afterThrowingLogger" pointcut-ref="aopPointcut"/>-->
        </aop:aspect>
    </aop:config>

    <!--正常情况

    Around start
    @Before...
    method invoke
    Around end
    @After...
    @AfterReturning...

    有异常的情况

    Around start
    @Before...
    method invoke
    @After...
    @AfterThrowing...

    try{
        try{
            //@Before
            method.invoke(..);
        }finally{
            //@After
        }
        //@AfterReturning
    }catch(){
        //@AfterThrowing
    }-->

</beans>