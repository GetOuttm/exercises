<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring中的依赖注入
        依赖注入：Dependency Injection
        IOC的作用：降低程序间的耦合(依赖关系)
        依赖关系的管理：以后都交给了spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护就称之为依赖注入
        依赖注入：
            能注入的数据：三种
                ①基本类型和string
                ②其他的bean类型(在配置文件中或者注释配置过的bean)
                ③复杂类型也就是集合类型
            注入的方式：三种    ①构造函数   ②set方法(常用)   ③注解
    -->

    <!--构造函数
         使用标签    constructor-arg
         标签出现的位置   bean标签的内部
         标签的属性
            type    用于指定要注入数据的数据类型，该数据类型是构造函数中某个或某些参数的类型  多个同类型无法实现
            index   用于指定要注入数据给构造函数中指定索引位置的参数赋值  索引的位置从0开始
            name    用于指定给构造函数中指定名称的参数赋值                                         最常用
            =======================以上三个用于指定给构造函数中那个参数赋值===============================
            value  用于提供给基本类型和String类型的数据
            ref     用于提供给其他的bean类型数据，指的是在spring核心容器中出现过的bean对象

       优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
       弊端：
           改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据也必须提供
-->
    <bean id="accountService" class="com.di.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="张三"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置日期对象-->
    <bean id="now" class="java.util.Date"></bean>


    <!--set方法注入
        涉及的标签   property
        标签出现的位置   bean标签的内部
        标签的属性
            name    用于指定注入时所调用的set方法名称
            value  用于提供给基本类型和String类型的数据
            ref     用于提供给其他的bean类型数据，指的是在spring核心容器中出现过的bean对象

       优势  创建对象时没有明确的限制，可以直接使用默认构造函数
       弊端  如果有某个成员必须有值，则获取对象时有可能set方法没有执行
    -->
    <bean id="accountService1" class="com.di.service.impl.AccountServiceImpl1">
        <property name="name" value="王五"/>
        <property name="age" value="18"/>
        <property name="birthday" ref="now"/>
    </bean>


    <!--此种方式是通过在 xml 中导入 p 名称空间，使用 p:propertyName 来注入数据，它的本质仍然是调用类中的
    set 方法实现注入功能。
        xmlns:p="http://www.springframework.org/schema/p"
    -->
    <bean id="accountService"
          class="com.di.service.impl.AccountServiceImpl1"
          p:name="test" p:age="21" p:birthday-ref="now"/>

    <!--复杂类型注入/集合注入
        用于给list集合注入的标签：list set array
        用于给map集合注入的标签   map props
        结构相同可以互换
    -->
    <bean id="accountService2" class="com.di.service.impl.AccountServiceImpl2">
        <property name="myStrs">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="a" value="aaa"></entry>
                <entry key="b">
                    <value>bbb</value>
                </entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="a">aaa</prop>
                <prop key="b">bbb</prop>
            </props>
        </property>
    </bean>
</beans>