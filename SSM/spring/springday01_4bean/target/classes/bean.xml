<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring容器来管理-->
    <!--spring对bean管理的细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建bean对象的三种方式-->

    <!-- Spring利用静态工厂方法创建对象 -->
    <bean id="cal1" class="java.util.Calendar" factory-method="getInstance"></bean>
    <!--第一种方式：使用默认构造函数创建，
        在spring配置文件中使用bean标签配以id和class属性之后，且没有其他标签和属性时，采用的就是默认构造函数
        创建bean对象，此时如果类中没有默认构造函数则对象无法创建
        <bean id="accountService" class="com.bean.service.impl.AccountServiceImpl"/>
        -->

    <!--第二种方式：使用普通工厂类中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器)
                先把工厂的创建交给 spring 来管理。
                然后在使用工厂的 bean 来调用里面的方法
                factory-bean 属性：用于指定实例工厂 bean 的 id。
                factory-method 属性：用于指定实例工厂中创建对象的方法
    <bean id="beanFactory" class="com.bean.factory.BeanFactory"/>
    <bean id="accountService" factory-bean="beanFactory" factory-method="getAccountService"/>
    -->

    <!--第三种方式：使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象，并存入spring容器)
            id 属性：指定 bean 的 id，用于从容器中获取
            class 属性：指定静态工厂的全限定类名
            factory-method 属性：指定生产对象的静态方法
    <bean id="accountService" class="com.bean.factory.StatcFactory" factory-method="getAccountService"/>
    -->

    <!--bean的作用范围调整
    bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：常用的就是前面两个
                singleton：单例的(默认)
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用域集群环境的全局会话范围，当不是居群环境时就是session

    <bean id="accountService" class="com.bean.service.impl.AccountServiceImpl" scope="prototype"/>
    -->

    <!--bean对象的生命周期
        单例对象：scope="singleton"
            一个应用只有一个对象的实例。它的作用范围就是整个引用。
            生命周期：
                对象出生：当应用加载，创建容器时，对象就被创建了。
                对象活着：只要容器在，对象一直活着。
                对象死亡：当应用卸载，销毁容器时，对象就被销毁了。
        多例对象：scope="prototype"
            每次访问对象时，都会重新创建对象实例。
            生命周期：
                对象出生：当使用对象时，创建新的对象实例。
                对象活着：只要对象在使用中，就一直活着。
                对象死亡：当对象长时间不用时，被 java 的垃圾回收器回收了。
        单例对象：
            出生  当容器创建时对象出生
            活着  只要容器还在，对象一直活着
            死亡  容器销毁。对象死亡
            总结：单例对象的生命周期和容器相同
        多例对象：
            出生  当我们使用对象时spring框架为我们创建
            活着  对象只要在使用过程中就一直活着
            死亡  当对象长时间不使用，且对象没有别的引用时，由java的垃圾回收器回收
    -->
    <bean id="accountService" class="com.bean.service.impl.AccountServiceImpl" scope="prototype"
    init-method="init" destroy-method="destory"/>
</beans>