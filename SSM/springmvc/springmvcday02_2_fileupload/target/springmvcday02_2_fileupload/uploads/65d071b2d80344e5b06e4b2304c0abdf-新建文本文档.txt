6月1日     上午11点半   腾讯会议     中科达奥
6月1日     下午2点    北京才鼎通--外派北京九恒星科技股份有限公司   
	联系人：王蒙  
	电话： 18310502950
	面试地点：北京市海淀区北三环西路43号中航广场2号楼11层。

	hibernate三种状态
	临时状态(单身)：new语句创建出来的对象。数据在内存中，还未存放到数据库中。不处于session中
	持久化状态(已婚)：加入到session缓存中。使用save和saveOrUpdate方法将数据从临时状态转换为持久化状态
	游离状态(离异)：通过evict或者close或clear方法从旁那个持久化状态转换为游离状态。通过update或saveOrUpdate或lock方法将游离状态转换为持久状态。已经被持久化，但是不处于session的缓存中
		
	sql的函数
	max：最大值
	min：最小值
	count：行数
	avg：平均值
	sum：总和

	数据类型：
		1      2        2      4    4     8          8      1
		byte  char shor int float double long boolean

	String 不可变final修饰
	StringBuffer线程安全
	方法：charAt 返回索引位置的字符
		indexOf字符的索引
		replace字符串转换
		trim去除两端空白
		split 分割字符串
		getBytes 返回字符串的byte类型数组
		length 长度
		toLowerCase  转小写字母
		toUpperCase  转大写字母
		subString 截取字符串
		format  格式化字符串
		equals  字符串比较

	jsp 
	request  请求对象
		方法：getParameter  
			getParameterValues  
			getParameterNames
			getParameterMap
			getsession
			getMethod
			setCharacterEncoding
			
	response	响应对象
	out 输出对象  
	application	应用程序对象，所有用户共享数据
	session	会话对象
		禁用cookie，session不能使用但是有其他的解决方法
	服务器默认的情况下会使用cookie的方法将sessionId发送到服务器。如果禁用了cookie，则sessionId不会被浏览器保存。服务器可以使用URL重写的方法来发送sessionId，就是将id放到地址栏
		实现方式
			String url = response.encodeUrl("跳转页面")
	exception   异常对象
	config	配置对象  servlet的配置对象
	page	当前页面对象  this
	pageContext    页面上下文对象   可以获取其他八个内置对象
	
	spring IOC 控制反转
		把对象的创建和控制交给spring容器。容器通过调构造器或者set、注解方法来建立对象之间的依赖关系
		利用Java反射，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法

	SpringAOP  面向切面编程。 
		动态代理：
		JDK:
		CGLB
		用于将那些与业务无关，却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块就是切面aspect  
	减少系统中的重复代码，降低模块之间的耦合度。提高系统的可维护性。可用于权限认证、日志、事务处理

	设计模式
17.1.2. 工厂方法模式
17.1.3. 抽象工厂模式
17.1.4. 单例模式
17.1.5. 建造者模式
17.1.6. 原型模式
17.1.7. 适配器模式
17.1.8. 装饰器模式
17.1.9. 代理模式
17.1.10. 外观模式
17.1.11. 桥接模式
17.1.12. 组合模式
17.1.13. 享元模式
17.1.14. 策略模式
17.1.15. 模板方法模式
17.1.16. 观察者模式
17.1.17. 迭代子模式
17.1.18. 责任链模式
17.1.19. 命令模式
17.1.20. 备忘录模式
17.1.21. 状态模式
17.1.22. 访问者模式
17.1.23. 中介者模式
17.1.24. 解释器模式
	
	二分算法 
	 public static int biSearch(int[] array,int a) {
        //[4, 6, 9, 12, 12, 23, 36, 45, 75, 78, 696]
        int left = 0;
        int right = array.length - 1;
        int mid;
        while (left <= right) {
            mid = (left + right) / 2;//中间位置
            if (array[mid] == a) {
                return mid + 1;
            } else if (array[mid] < a) {//向右查找
                left = mid + 1;
            } else {//向左查找
                right = mid - 1;
            }
        }
        return -1;
    }
	jvm


6月2日      上午10点半  北京多信慧网科技有限公司    
	面试地点：北京朝阳区领地B座1302-1303 